/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 .\public\models\vr_headset.glb -t 
*/

import * as THREE from "three";
import React, { useMemo, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useLoader } from "@react-three/fiber";
import { motion } from "framer-motion-3d";

type GLTFResult = GLTF & {
  nodes: {
    vr_visor: THREE.Mesh;
    vr_visor_Screen: THREE.Mesh;
  };
  materials: {};
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model(
  props: JSX.IntrinsicElements["group"] & { videoTexture?: THREE.VideoTexture }
) {
  const { nodes, materials } = useGLTF("/models/vr_headset.glb") as GLTFResult;

  const texture: THREE.Texture = useLoader(
    THREE.TextureLoader,
    "textures/vr_visor_Diffuse.png"
  );
  texture.flipY = false;
  const specularMap: THREE.Texture = useLoader(
    THREE.TextureLoader,
    "textures/vr_visor_Specular.png"
  );
  const vrHeadsetMaterial = useMemo(
    () =>
      new THREE.MeshPhongMaterial({
        map: texture,
        specularMap: specularMap,
      }),
    [texture, specularMap]
  );

  const { videoTexture } = props;


  // const videoURL = "videos/Sprite_Fright.webm";

  // const video = useMemo(() => {
  //   const vid = document.createElement("video");
  //   vid.src = videoURL;
  //   vid.crossOrigin = "Anonymous";
  //   vid.loop = true;
  //   vid.muted = true;
  //   vid.play();
  //   return vid;
  // }, []);

  // const videoTexture = useMemo(() => new THREE.VideoTexture(video), [video]);
  // videoTexture.flipY = false;

  const videoMaterial = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: videoTexture,
        emissiveMap: videoTexture,
        side: THREE.DoubleSide,
      }),
    [videoTexture]
  );

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.vr_visor.geometry} 
      // material={vrHeadsetMaterial}
      >
        <motion.meshPhongMaterial
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.9 }}
          map={texture}
          specularMap={specularMap}
        />
        <mesh
          geometry={nodes.vr_visor_Screen.geometry}
          // material={videoMaterial}
          position={[0, 0, 1.631]}
        >
          <motion.meshPhongMaterial
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.9 }}
            map={videoTexture}
            emissiveMap={videoTexture}
          />
        </mesh>
      </mesh>
    </group>
  );
}

useGLTF.preload("/models/vr_headset.glb");
