/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 .\public\models\phone.glb -t 
*/

import * as THREE from "three";
import React, { useMemo, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useLoader } from "@react-three/fiber";
import { motion } from "framer-motion-3d";
import { Variants } from "framer-motion";

type GLTFResult = GLTF & {
  nodes: {
    phone_base: THREE.Mesh;
    phone_screen: THREE.Mesh;
  };
  materials: {};
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model(
  props: JSX.IntrinsicElements["group"] & { videoTexture?: THREE.VideoTexture }
) {
  const { nodes, materials } = useGLTF("/models/phone.glb") as GLTFResult;

  const texture: THREE.Texture = useLoader(
    THREE.TextureLoader,
    "textures/phone_base_Diffuse.webp"
  );
  texture.flipY = false;
  const specularMap: THREE.Texture = useLoader(
    THREE.TextureLoader,
    "textures/phone_base_Specular.webp"
  );
  const phoneMaterial = useMemo(
    () =>
      new THREE.MeshPhongMaterial({
        map: texture,
        specularMap: specularMap,
      }),
    [texture, specularMap]
  );

  const { videoTexture } = props;


  // const videoURL = "videos/Sprite_Fright.webm";

  // const video = useMemo(() => {
  //   const vid = document.createElement("video");
  //   vid.src = videoURL;
  //   vid.crossOrigin = "Anonymous";
  //   vid.loop = true;
  //   vid.muted = true;
  //   vid.play();
  //   return vid;
  // }, []);

  // const videoTexture = useMemo(() => new THREE.VideoTexture(video), [video]);
  // videoTexture.flipY = false;

  const videoMaterial = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: videoTexture,
        emissiveMap: videoTexture,
        side: THREE.DoubleSide,
      }),
    [videoTexture]
  );

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.phone_base.geometry} 
      // material={phoneMaterial}
      >
        <motion.meshPhongMaterial
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.9 }}
          map={texture}
          specularMap={specularMap}
        />
      </mesh>
      <mesh
        geometry={nodes.phone_screen.geometry}
        // material={videoMaterial}
        position={[0, 0.001, 0]}
      >
        <motion.meshPhongMaterial
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.9 }}
          map={videoTexture}
          emissiveMap={videoTexture}
        />
      </mesh>
      {/* <mesh></mesh> */}
    </group>
  );
}

useGLTF.preload("/models/phone.glb");
